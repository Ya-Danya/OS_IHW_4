Самсоненко Данила Дмитриевич БПИ213

Вариант23 Задание:
Задача об инвентаризации по книгам. 
После нового года в библиотекеуниверситета обнаружилась
пропажа каталога. После поиска и наказания,
виноватых ректор дал указание восстановить каталог силами студентов.
Фонд библиотека представляет собой прямоугольное помещение,
в котором находится M рядов по N шкафов
по K книг в каждом шкафу. Требуется создать приложение,
составляющее каталог. При решении задачи в качестве отдельного
процесса задается внесение в каталог записи об отдельной книге,
которая сразу ставится на место в соответствии с выбранным
методом упорядочения каталога. Сервер формирует каталог, упорядочивая
записи в процессе их поступления. Клиент состоит из
множества конкурирующих процессов, каждый из которых формирует
одну запись и передает ее серверу. По завершению обхода
шкафов все процессы клиента завершаются, а серверу передается
информация о завершении. Примечание. Каталог — это список книг,
упорядоченный по их инвентарному номеру или по алфавиту
(на выбор разработчика). Каждая строка каталога
содержит идентифицирующее значение (номерили название),
номер ряда, номер шкафа, номер книги в шкафу.

Описание содержимого проекта.

Главными файлами олицетворяющими сущности клиентов и сервера являются файлы server.c, client.c, observer.c

В файле server.c описан алгоритм работы сервера.
При запуске server.c пользователь может задать настройки сервера,
а тоесть IP и Scket через аргументы командной строки.
Если же это не происходит, то сервер создается с настройками по умолчанию.
После конфигурации сервера, запускается механизм циклической обработки запросов.
Программа принимает сообщения, отправленные по UDP и приводит их к типу данных Book.
В структуре Book, описанной в файле header.h есть следующие поля
    int id;
    int row_number;
    int bookshelf_number;
    int book_number;
    int code;
Как можно понять по названиям, первые 4 поля это параметры книги.
Поле code было введено для того, чтобы можно было с удобством
построить восприятие разных сообщений, приходящих серверу.
Если значение code = 0, то на сервер пришла книга для добавления в библиотеку от обычного клиента.
Если значение code = 2, то на сервер пришел запрос о отправке данных к observer.
После обработки сообщения, сервер опять пытается получить данные на обработку.
Для примера, работа сервера заканчивается, когда кол-во книг начинает быть больше, чем вместимость библиотеки.
Для удобства тестирования по-умолчанию максимальное кол-во книг в библиотеке - 100.
Также, для наглядной демонстрации возможности принимать данные от несколькихклиентов сервер засыпает на некоторое время(2 секунды).

В файле client.c описан алгоритм работы клиента.
При запуске клиент требует файл для ввода данных о книгах, которые пользователь хочет добавить в каталог.
Данные должны быть предствленны в следующем виде:
{row number} {bookshelf_number} {book_number} {id}
{row number} {bookshelf_number} {book_number} {id}
{row number} {bookshelf_number} {book_number} {id}
Программа читает данные из файла, и заполняет на их базе массив.
При заполнении, значение code у книги устонавливается = 0.
После этого клинт отправляет отправляет данные о каждоый книге на сервер по UDP.
При этом, книга считается отправленной тогда, когда с сервера пришел ответ о том, что книга получена.
В данной ситуации обработка некорректного ввода может быть реализована с помощью поля code. 
А то есть мы присваиваем каждому типу некорректного ввода свое значение code и надлежащим образом обрабатываем данные.
В рамках этого приложения проверки сведены к минимуму в демонстрационных целях.

В файле observer.c описан алгоритм работы приложения-наблюдателя.
Через эту сущность клиент может получать данные о текущем состоянии каталога на сервере.
Алгоритм работы следующий:
observer конфигурирует адрес сервера для отправки.
После чего отправляет запрос на получение списка книг в библиотеке.
После этого он циклически принимает сообщения с книгами, пока не придет книга, code которой = 6.
Книги приходят в отсортированном порядке. Сортировка происходит на сервере тогда, когда приходит запрос от наблюдателя.
Данные о полученных книгах выводятся в консоль.
После этого наблюдатель ждет некоторое время, для того, чтобы сервер мог получить данные о новых книгах и делает запрос снова.
В рамках демонстрации варианта завершения работы наблюдателя вводится ограничение по кол-ву запростов на сервер = 6.
После того, как observer получил данные 6 раз он завершает свою работу.

В Makefile представлен алгоритм компиляции всех сущностей проекта.

Для примера ввода предоставлены файлы input.txt input2.txt

Реализована функция работы сервера в непрерывном режиме при обращении нескольких пользователей.
Данные будут переаваться последовательно в порядки прихода запросов.